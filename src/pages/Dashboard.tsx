
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { useNavigate } from 'react-router-dom';
import {
  User,
  Package,
  ShoppingCart,
  Heart,
  Calendar,
  TrendingUp,
  Award,
  Star,
  Bell,
  Settings,
  CreditCard,
  Download,
  Clock,
  Target,
  BarChart3,
  PieChart,
  Activity
} from 'lucide-react';

interface DashboardStats {
  totalOrders: number;
  activeSubscriptions: number;
  totalSpent: number;
  favoriteProducts: number;
  recentOrders: any[];
  upcomingRenewals: any[];
  achievements: any[];
}

const Dashboard = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [stats, setStats] = useState<DashboardStats>({
    totalOrders: 0,
    activeSubscriptions: 0,
    totalSpent: 0,
    favoriteProducts: 0,
    recentOrders: [],
    upcomingRenewals: [],
    achievements: []
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!user) {
      navigate('/auth');
      return;
    }
    fetchDashboardData();
  }, [user]);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);

      // Fetch orders
      const { data: orders } = await supabase
        .from('orders')
        .select('*')
        .eq('user_id', user?.id)
        .order('created_at', { ascending: false });

      // Fetch subscriptions
      const { data: subscriptions } = await supabase
        .from('user_subscriptions')
        .select('*')
        .eq('user_id', user?.id)
        .eq('is_active', true);

      // Fetch favorites
      const { data: favorites } = await supabase
        .from('favorites')
        .select('*')
        .eq('user_id', user?.id);

      const totalSpent = orders?.reduce((sum, order) => sum + Number(order.total_amount), 0) || 0;
      const upcomingRenewals = subscriptions?.filter(sub => {
        const expiryDate = new Date(sub.expires_at);
        const now = new Date();
        const daysUntilExpiry = Math.ceil((expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
        return daysUntilExpiry <= 30 && daysUntilExpiry > 0;
      }) || [];

      // Create achievements based on user activity
      const achievements = [];
      if (orders && orders.length >= 1) achievements.push({ name: '‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞', icon: 'üéâ', description: '‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®' });
      if (orders && orders.length >= 5) achievements.push({ name: '‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ', icon: 'üèÜ', description: '‡ß´‡¶ü‡¶ø ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®' });
      if (totalSpent >= 1000) achievements.push({ name: '‡¶¨‡¶°‡¶º ‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ', icon: 'üíé', description: '‡ßß‡ß¶‡ß¶‡ß¶+ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ñ‡¶∞‡¶ö' });
      if (subscriptions && subscriptions.length >= 3) achievements.push({ name: '‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞', icon: '‚≠ê', description: '‡ß©+ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®' });

      setStats({
        totalOrders: orders?.length || 0,
        activeSubscriptions: subscriptions?.length || 0,
        totalSpent,
        favoriteProducts: favorites?.length || 0,
        recentOrders: orders?.slice(0, 5) || [],
        upcomingRenewals,
        achievements
      });
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[1, 2, 3, 4].map(i => (
              <div key={i} className="h-32 bg-gray-200 rounded"></div>
            ))}
          </div>
          <div className="h-96 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold">‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°</h1>
          <p className="text-gray-600 mt-2">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ï ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ‡¶Ø‡¶º</p>
        </div>
        <Button variant="outline" onClick={() => navigate('/profile')}>
          <Settings className="h-4 w-4 mr-2" />
          ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <Card className="bg-gradient-to-r from-blue-500 to-blue-600 text-white">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100">‡¶Æ‡ßã‡¶ü ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞</p>
                <p className="text-2xl font-bold">{stats.totalOrders}</p>
              </div>
              <ShoppingCart className="h-8 w-8 text-blue-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-green-500 to-green-600 text-white">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100">‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®</p>
                <p className="text-2xl font-bold">{stats.activeSubscriptions}</p>
              </div>
              <Calendar className="h-8 w-8 text-green-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-purple-500 to-purple-600 text-white">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-100">‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö</p>
                <p className="text-2xl font-bold">‡ß≥{stats.totalSpent.toLocaleString()}</p>
              </div>
              <CreditCard className="h-8 w-8 text-purple-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-pink-500 to-pink-600 text-white">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-pink-100">‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶™‡¶£‡ßç‡¶Ø</p>
                <p className="text-2xl font-bold">{stats.favoriteProducts}</p>
              </div>
              <Heart className="h-8 w-8 text-pink-200" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Tabs */}
      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">‡¶ì‡¶≠‡¶æ‡¶∞‡¶≠‡¶ø‡¶â</TabsTrigger>
          <TabsTrigger value="orders">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞</TabsTrigger>
          <TabsTrigger value="subscriptions">‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®</TabsTrigger>
          <TabsTrigger value="achievements">‡¶Ö‡¶∞‡ßç‡¶ú‡¶®</TabsTrigger>
          <TabsTrigger value="analytics">‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶ï‡ßç‡¶∏</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid lg:grid-cols-2 gap-6">
            {/* Recent Orders */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="h-5 w-5" />
                  ‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞
                </CardTitle>
              </CardHeader>
              <CardContent>
                {stats.recentOrders.length > 0 ? (
                  <div className="space-y-4">
                    {stats.recentOrders.map((order) => (
                      <div key={order.id} className="flex items-center justify-between p-3 border rounded-lg">
                        <div>
                          <p className="font-medium">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #{order.id.slice(0, 8)}</p>
                          <p className="text-sm text-gray-600">
                            {new Date(order.created_at).toLocaleDateString('bn-BD')}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold">‡ß≥{order.total_amount.toLocaleString()}</p>
                          <Badge variant={
                            order.status === 'delivered' ? 'default' :
                            order.status === 'confirmed' ? 'secondary' :
                            order.status === 'pending' ? 'outline' : 'destructive'
                          }>
                            {order.status === 'pending' ? '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç' :
                             order.status === 'confirmed' ? '‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§' :
                             order.status === 'delivered' ? '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞' : '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤'}
                          </Badge>
                        </div>
                      </div>
                    ))}
                    <Button variant="outline" className="w-full" onClick={() => navigate('/orders')}>
                      ‡¶∏‡¶¨ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
                    </Button>
                  </div>
                ) : (
                  <p className="text-center text-gray-500 py-8">‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡ßá‡¶á</p>
                )}
              </CardContent>
            </Card>

            {/* Upcoming Renewals */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Clock className="h-5 w-5" />
                  ‡¶Ü‡¶∏‡¶õ‡ßá ‡¶∞‡¶ø‡¶®‡¶ø‡¶â‡¶Ø‡¶º‡¶æ‡¶≤
                </CardTitle>
              </CardHeader>
              <CardContent>
                {stats.upcomingRenewals.length > 0 ? (
                  <div className="space-y-4">
                    {stats.upcomingRenewals.map((sub) => (
                      <div key={sub.id} className="flex items-center justify-between p-3 border rounded-lg">
                        <div>
                          <p className="font-medium">{sub.product_name}</p>
                          <p className="text-sm text-gray-600">
                            {new Date(sub.expires_at).toLocaleDateString('bn-BD')} ‡¶è ‡¶∂‡ßá‡¶∑
                          </p>
                        </div>
                        <Badge variant="outline">
                          {Math.ceil((new Date(sub.expires_at).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} ‡¶¶‡¶ø‡¶®
                        </Badge>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-center text-gray-500 py-8">‡¶ï‡ßã‡¶®‡ßã ‡¶Ü‡¶∏‡¶õ‡ßá ‡¶∞‡¶ø‡¶®‡¶ø‡¶â‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶®‡ßá‡¶á</p>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle>‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <Button variant="outline" className="h-20 flex-col" onClick={() => navigate('/')}>
                  <ShoppingCart className="h-6 w-6 mb-2" />
                  ‡¶ï‡ßá‡¶®‡¶æ‡¶ï‡¶æ‡¶ü‡¶æ
                </Button>
                <Button variant="outline" className="h-20 flex-col" onClick={() => navigate('/favorites')}>
                  <Heart className="h-6 w-6 mb-2" />
                  ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
                </Button>
                <Button variant="outline" className="h-20 flex-col" onClick={() => navigate('/subscriptions')}>
                  <Calendar className="h-6 w-6 mb-2" />
                  ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®
                </Button>
                <Button variant="outline" className="h-20 flex-col" onClick={() => navigate('/profile')}>
                  <User className="h-6 w-6 mb-2" />
                  ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Orders Tab */}
        <TabsContent value="orders">
          <Card>
            <CardHeader>
              <CardTitle>‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏</CardTitle>
              <CardDescription>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§</CardDescription>
            </CardHeader>
            <CardContent>
              {stats.recentOrders.length > 0 ? (
                <div className="space-y-4">
                  {stats.recentOrders.map((order) => (
                    <div key={order.id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div>
                          <h4 className="font-semibold">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #{order.id.slice(0, 8)}</h4>
                          <p className="text-sm text-gray-600">
                            {new Date(order.created_at).toLocaleDateString('bn-BD')}
                          </p>
                        </div>
                        <Badge variant={
                          order.status === 'delivered' ? 'default' :
                          order.status === 'confirmed' ? 'secondary' :
                          order.status === 'pending' ? 'outline' : 'destructive'
                        }>
                          {order.status === 'pending' ? '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç' :
                           order.status === 'confirmed' ? '‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§' :
                           order.status === 'delivered' ? '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞' : '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤'}
                        </Badge>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü: {order.payment_method}</p>
                          {order.promo_code && (
                            <p className="text-sm text-green-600">‡¶™‡ßç‡¶∞‡ßã‡¶Æ‡ßã: {order.promo_code}</p>
                          )}
                        </div>
                        <p className="font-bold text-lg">‡ß≥{order.total_amount.toLocaleString()}</p>
                      </div>
                    </div>
                  ))}
                  <Button className="w-full" onClick={() => navigate('/orders')}>
                    ‡¶∏‡¶¨ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
                  </Button>
                </div>
              ) : (
                <div className="text-center py-12">
                  <Package className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡ßá‡¶á</p>
                  <Button className="mt-4" onClick={() => navigate('/')}>
                    ‡¶ï‡ßá‡¶®‡¶æ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Subscriptions Tab */}
        <TabsContent value="subscriptions">
          <Card>
            <CardHeader>
              <CardTitle>‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü</CardTitle>
              <CardDescription>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®</CardDescription>
            </CardHeader>
            <CardContent>
              <Button className="w-full mb-4" onClick={() => navigate('/subscriptions')}>
                ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
              </Button>
              <div className="grid gap-4">
                <div className="text-center text-gray-600">
                  ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Achievements Tab */}
        <TabsContent value="achievements">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Award className="h-5 w-5" />
                ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶ú‡¶®
              </CardTitle>
              <CardDescription>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶≤‡¶æ‡¶™‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶Ö‡¶∞‡ßç‡¶ú‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ú</CardDescription>
            </CardHeader>
            <CardContent>
              {stats.achievements.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {stats.achievements.map((achievement, index) => (
                    <div key={index} className="bg-gradient-to-r from-yellow-50 to-yellow-100 border border-yellow-200 rounded-lg p-4 text-center">
                      <div className="text-4xl mb-2">{achievement.icon}</div>
                      <h4 className="font-semibold text-yellow-800">{achievement.name}</h4>
                      <p className="text-sm text-yellow-700">{achievement.description}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12">
                  <Award className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶®‡ßá‡¶á</p>
                  <p className="text-sm text-gray-500 mt-2">‡¶ï‡ßá‡¶®‡¶æ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®!</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics">
          <div className="grid lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5" />
                  ‡¶ñ‡¶∞‡¶ö‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö</span>
                    <span className="font-bold">‡ß≥{stats.totalSpent.toLocaleString()}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>‡¶ó‡¶°‡¶º ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø</span>
                    <span className="font-bold">
                      ‡ß≥{stats.totalOrders > 0 ? Math.round(stats.totalSpent / stats.totalOrders).toLocaleString() : '0'}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ó‡¶°‡¶º ‡¶ñ‡¶∞‡¶ö</span>
                    <span className="font-bold">‡ß≥{Math.round(stats.totalSpent / 12).toLocaleString()}</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="h-5 w-5" />
                  ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶≤‡¶æ‡¶™ ‡¶∏‡ßÇ‡¶ö‡¶ï
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <span>‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶§‡¶æ</span>
                      <span>‡ßÆ‡ß´%</span>
                    </div>
                    <Progress value={85} />
                  </div>
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <span>‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞</span>
                      <span>‡ß≠‡ß®%</span>
                    </div>
                    <Progress value={72} />
                  </div>
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <span>‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø</span>
                      <span>‡ßØ‡ß´%</span>
                    </div>
                    <Progress value={95} />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Dashboard;
